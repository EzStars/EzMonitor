import { Context } from 'koa';
import { v4 as uuidv4 } from 'uuid';
import { performanceStore } from '../cache/performanceStore';
import { broadcastToApp } from './sse';
import { PerformanceData } from '../types/performance';

/**
 * Êé•Êî∂ÊÄßËÉΩÊï∞ÊçÆ‰∏äÊä•
 */
export const reportPerformance = async (ctx: Context) => {
  try {
    const reportData = ctx.request.body;
    const { userId, sendType, data } = reportData;

    // Ëé∑ÂèñÂÆ¢Êà∑Á´Ø‰ø°ÊÅØ
    const userAgent = ctx.get('user-agent');
    const ip = ctx.ip;

    // Êï∞ÊçÆÈ™åËØÅ
    if (!data || !Array.isArray(data) || data.length === 0) {
      ctx.body = {
        code: 400,
        message: 'Êï∞ÊçÆÊ†ºÂºèÈîôËØØ',
      };
      return;
    }

    // Â§ÑÁêÜÊÄßËÉΩÊï∞ÊçÆ
    const performanceDataList: PerformanceData[] = data
      .filter(item => item.type === 'performance')
      .map(item => ({
        id: uuidv4(),
        appId: item.appId || '123456',
        userId,
        userAgent,
        ip,
        ...item,
      }));

    console.log('üìä Êé•Êî∂Âà∞ÊÄßËÉΩÊï∞ÊçÆ:', performanceDataList);

    if (performanceDataList.length === 0) {
      ctx.body = {
        code: 400,
        message: 'Ê≤°ÊúâÊúâÊïàÁöÑÊÄßËÉΩÊï∞ÊçÆ',
      };
      return;
    }

    // ÊâπÈáèÂ≠òÂÇ®
    const appId = performanceDataList[0].appId;
    performanceStore.addBatch(appId, performanceDataList);

    // ÂÆûÊó∂Êé®ÈÄÅÁªôÂâçÁ´Ø (ÂàÜÁ±ªÊé®ÈÄÅ)
    performanceDataList.forEach(item => {
      broadcastToApp(appId, `performance:${item.subType}`, item);
    });

    // Êé®ÈÄÅÊúÄÊñ∞ÁöÑÁªüËÆ°Êï∞ÊçÆ
    const stats = performanceStore.getStats(appId);
    broadcastToApp(appId, 'performance:stats', stats);

    ctx.body = {
      code: 200,
      message: 'success',
      data: {
        total: performanceDataList.length,
        sendType,
        appId,
      },
    };
  } catch (error: any) {
    console.error('Êé•Êî∂ÊÄßËÉΩÊï∞ÊçÆÂ§±Ë¥•:', error);
    ctx.body = {
      code: 500,
      message: error.message || 'ÊúçÂä°Âô®ÈîôËØØ',
    };
  }
};

/**
 * Ëé∑ÂèñÊÄßËÉΩÊï∞ÊçÆÂàóË°®
 */
export const getPerformanceList = async (ctx: Context) => {
  try {
    const { appId, subType, limit, startTime, endTime } = ctx.query;

    if (!appId) {
      ctx.body = {
        code: 400,
        message: 'Áº∫Â∞ë appId ÂèÇÊï∞',
      };
      return;
    }

    const list = performanceStore.getList(appId as string, {
      subType: subType as string,
      limit: limit ? Number(limit) : 50,
      startTime: startTime ? Number(startTime) : undefined,
      endTime: endTime ? Number(endTime) : undefined,
    });

    ctx.body = {
      code: 200,
      message: 'success',
      data: {
        total: list.length,
        list,
      },
    };
  } catch (error: any) {
    ctx.body = {
      code: 500,
      message: error.message,
    };
  }
};

/**
 * Ëé∑ÂèñÊåáÂÆöÁ±ªÂûãÁöÑÊÄßËÉΩÊï∞ÊçÆ
 */
export const getPerformanceByType = async (ctx: Context) => {
  try {
    const { appId, subType } = ctx.params;

    if (!appId || !subType) {
      ctx.body = {
        code: 400,
        message: 'Áº∫Â∞ëÂøÖË¶ÅÂèÇÊï∞',
      };
      return;
    }

    const list = performanceStore.getByType(appId, subType);

    ctx.body = {
      code: 200,
      message: 'success',
      data: {
        subType,
        total: list.length,
        list: list.slice(0, 100), // ÊúÄÂ§öËøîÂõû 100 Êù°
      },
    };
  } catch (error: any) {
    ctx.body = {
      code: 500,
      message: error.message,
    };
  }
};

/**
 * Ëé∑ÂèñÊÄßËÉΩÁªüËÆ°Êï∞ÊçÆ
 */
export const getPerformanceStats = async (ctx: Context) => {
  try {
    const { appId, startTime, endTime } = ctx.query;

    if (!appId) {
      ctx.body = {
        code: 400,
        message: 'Áº∫Â∞ë appId ÂèÇÊï∞',
      };
      return;
    }

    let stats;

    // Â¶ÇÊûúÊåáÂÆö‰∫ÜÊó∂Èó¥ËåÉÂõ¥ÔºåÂàôËÆ°ÁÆóËØ•ËåÉÂõ¥ÂÜÖÁöÑÁªüËÆ°Êï∞ÊçÆ
    if (startTime && endTime) {
      stats = performanceStore.getStatsByTimeRange(
        appId as string,
        Number(startTime),
        Number(endTime),
      );
    } else {
      stats = performanceStore.getStats(appId as string);
    }

    ctx.body = {
      code: 200,
      message: 'success',
      data: stats,
    };
  } catch (error: any) {
    ctx.body = {
      code: 500,
      message: error.message,
    };
  }
};

/**
 * Ëé∑ÂèñÊ†∏ÂøÉ Web Vitals
 */
export const getWebVitals = async (ctx: Context) => {
  try {
    const { appId } = ctx.query;

    if (!appId) {
      ctx.body = {
        code: 400,
        message: 'Áº∫Â∞ë appId ÂèÇÊï∞',
      };
      return;
    }

    const stats = performanceStore.getStats(appId as string);

    // ÊèêÂèñÊ†∏ÂøÉ Web Vitals
    const webVitals = {
      fp: stats.fp,
      fcp: stats.fcp,
      lcp: stats.lcp,
      // Ê†πÊçÆ Google Ê†áÂáÜÂà§Êñ≠ÊÄßËÉΩÁ≠âÁ∫ß
      grade: {
        fp: stats.fp < 1000 ? 'good' : stats.fp < 3000 ? 'medium' : 'poor',
        fcp: stats.fcp < 1800 ? 'good' : stats.fcp < 3000 ? 'medium' : 'poor',
        lcp: stats.lcp < 2500 ? 'good' : stats.lcp < 4000 ? 'medium' : 'poor',
      },
    };

    ctx.body = {
      code: 200,
      message: 'success',
      data: webVitals,
    };
  } catch (error: any) {
    ctx.body = {
      code: 500,
      message: error.message,
    };
  }
};

/**
 * Ëé∑ÂèñÊÖ¢ËØ∑Ê±ÇÂàóË°®
 */
export const getSlowRequests = async (ctx: Context) => {
  try {
    const { appId, threshold = 1000 } = ctx.query;

    if (!appId) {
      ctx.body = {
        code: 400,
        message: 'Áº∫Â∞ë appId ÂèÇÊï∞',
      };
      return;
    }

    const fetchList = performanceStore.getByType(appId as string, 'fetch');
    const xhrList = performanceStore.getByType(appId as string, 'xhr');

    const allRequests = [...fetchList, ...xhrList] as any[];

    // Á≠õÈÄâÊÖ¢ËØ∑Ê±Ç
    const slowRequests = allRequests
      .filter(item => item.duration > Number(threshold))
      .sort((a, b) => b.duration - a.duration) // ÊåâËÄóÊó∂ÈôçÂ∫è
      .slice(0, 50); // ÊúÄÂ§öËøîÂõû 50 Êù°

    ctx.body = {
      code: 200,
      message: 'success',
      data: {
        threshold: Number(threshold),
        total: slowRequests.length,
        list: slowRequests,
      },
    };
  } catch (error: any) {
    ctx.body = {
      code: 500,
      message: error.message,
    };
  }
};

/**
 * Ëé∑ÂèñÈîôËØØËØ∑Ê±ÇÂàóË°®
 */
export const getErrorRequests = async (ctx: Context) => {
  try {
    const { appId } = ctx.query;

    if (!appId) {
      ctx.body = {
        code: 400,
        message: 'Áº∫Â∞ë appId ÂèÇÊï∞',
      };
      return;
    }

    const fetchList = performanceStore.getByType(appId as string, 'fetch');
    const xhrList = performanceStore.getByType(appId as string, 'xhr');

    const allRequests = [...fetchList, ...xhrList] as any[];

    // Á≠õÈÄâÈîôËØØËØ∑Ê±Ç (4xx, 5xx)
    const errorRequests = allRequests
      .filter(item => item.status >= 400)
      .sort((a, b) => b.timestamp - a.timestamp) // ÊåâÊó∂Èó¥ÈôçÂ∫è
      .slice(0, 50);

    ctx.body = {
      code: 200,
      message: 'success',
      data: {
        total: errorRequests.length,
        list: errorRequests,
      },
    };
  } catch (error: any) {
    ctx.body = {
      code: 500,
      message: error.message,
    };
  }
};

/**
 * Ëé∑ÂèñËµÑÊ∫êÂä†ËΩΩÁªüËÆ°
 */
export const getResourceStats = async (ctx: Context) => {
  try {
    const { appId } = ctx.query;

    if (!appId) {
      ctx.body = {
        code: 400,
        message: 'Áº∫Â∞ë appId ÂèÇÊï∞',
      };
      return;
    }

    const resourceList = performanceStore.getByType(
      appId as string,
      'resource',
    ) as any[];

    // ÊåâÁ±ªÂûãÂàÜÁªÑÁªüËÆ°
    const typeStats = resourceList.reduce(
      (acc, item) => {
        const type = item.initiatorType || 'other';
        if (!acc[type]) {
          acc[type] = {
            count: 0,
            totalDuration: 0,
            totalSize: 0,
          };
        }
        acc[type].count++;
        acc[type].totalDuration += item.duration;
        acc[type].totalSize += item.transferSize || 0;
        return acc;
      },
      {} as Record<string, any>,
    );

    // ËÆ°ÁÆóÂπ≥ÂùáÂÄº
    Object.keys(typeStats).forEach(type => {
      typeStats[type].avgDuration = Math.round(
        typeStats[type].totalDuration / typeStats[type].count,
      );
      typeStats[type].avgSize = Math.round(
        typeStats[type].totalSize / typeStats[type].count,
      );
    });

    ctx.body = {
      code: 200,
      message: 'success',
      data: {
        total: resourceList.length,
        typeStats,
      },
    };
  } catch (error: any) {
    ctx.body = {
      code: 500,
      message: error.message,
    };
  }
};

/**
 * Ê∏ÖÁ©∫ÊÄßËÉΩÊï∞ÊçÆ
 */
export const clearPerformanceData = async (ctx: Context) => {
  try {
    const { appId } = ctx.request.body;

    if (appId) {
      performanceStore.clear(appId);
      ctx.body = {
        code: 200,
        message: `Â∑≤Ê∏ÖÁ©∫ appId ${appId} ÁöÑÊÄßËÉΩÊï∞ÊçÆ`,
      };
    } else {
      performanceStore.clearAll();
      ctx.body = {
        code: 200,
        message: 'Â∑≤Ê∏ÖÁ©∫ÊâÄÊúâÊÄßËÉΩÊï∞ÊçÆ',
      };
    }
  } catch (error: any) {
    ctx.body = {
      code: 500,
      message: error.message,
    };
  }
};

/**
 * Ëé∑ÂèñÂ≠òÂÇ®‰ø°ÊÅØ
 */
export const getStorageInfo = async (ctx: Context) => {
  try {
    const { appId } = ctx.query;

    const size = appId
      ? performanceStore.getSize(appId as string)
      : performanceStore.getSize();

    ctx.body = {
      code: 200,
      message: 'success',
      data: {
        appId: appId || 'all',
        size,
        maxSize: 2000,
        usage: `${((size / 2000) * 100).toFixed(2)}%`,
      },
    };
  } catch (error: any) {
    ctx.body = {
      code: 500,
      message: error.message,
    };
  }
};
